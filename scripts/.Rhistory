dev.off()
}
}
# # add significance stars:
# fisher_df$significance <- stars.pval(fisher_df$pval)
#
# fisher_df$significance <- ifelse(
#   fisher_df$pval > 0.05, 'n.s.', ifelse(
#   fisher_df$pval >= 0.05, '*', ifelse(
#   fisher_df$pval >= 0.005, '**', '***'
# )))
library(VennDiagram)
library(gridExtra)
library(Seurat)
library(Signac)
library(tidyverse)
library(future.apply)
library(ggpubr)
library(reshape2)
library(tictoc)
library(patchwork)
library(ggridges)
library(RColorBrewer)
# knitr::opts_knit$set(root.dir = "/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
setwd("/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
# load all pathways
pathway_scores <- list()
studies <- c('mathys_pfc', 'leng_etc', 'leng_sfg')
tests <- c('early_vs_no', 'late_vs_early', 'ad_vs_no', 'late_vs_no')
for (study in studies) {
pathway_scores[[study]] <- list()
for (test in tests) {
pathway_scores[[study]][[test]] <- read.csv(sprintf('results/%s/%s_differentially_expressed_pathways.csv', test, study))
}
}
# create a list of unique cell types
celltypes <- unique(pathway_scores[['leng_etc']][['ad_vs_no']]$celltype)
setwd("/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
library(eulerr)
library(GeneOverlap)
fisher_df <- data.frame()
color_scheme_celltype <- list()
color_scheme_celltype[['Excitatory']] = 'aquamarine3'
color_scheme_celltype[['Inhibitory']] = 'darkolivegreen3'
color_scheme_celltype[['Astrocyte']] = 'brown3'
color_scheme_celltype[['Oligodendrocyte']] = 'darkorchid3'
color_scheme_celltype[['Microglia']] = 'deepskyblue3'
color_scheme_celltype[['OPC']] = 'deeppink3'
for(test_name in names(pathway_scores[['leng_etx']])){
for(cur_celltype in c('Astrocyte', 'Excitatory', 'Inhibitory', 'Microglia', 'Oligodendrocyte', 'OPC')){
# get diagnosis DEGs for this celltype:
# cur_degs <- celltype.diagnosis.markers %>% subset(cluster == 'AD' & celltype ==  cur_celltype & avg_logFC >= 0)
# get celltype degs for this celltype:
cur_celltype_pathways_pfc <- pathway_scores[['mathys_pfc']][[test_name]] %>% subset(celltype == cur_celltype)
cur_celltype_pathways_etx <- pathway_scores[['leng_etc']][[test_name]] %>% subset(celltype == cur_celltype)
cur_celltype_pathways_sfg <- pathway_scores[['leng_sfg']][[test_name]] %>% subset(celltype == cur_celltype)
# overlap between links and diagnosis degs
# diag_overlap_pval <- testGeneOverlap(newGeneOverlap(
#   unique(cur_celltype_pathways_pfc$pathway),
#   unique(cur_celltype_pathways_etx$pathway),
#   genome.size=length(intersect(rownames(NucSeq), proj@peakSet$nearestGene))
# ))@pval
# celltype_overlap_pval <- testGeneOverlap(newGeneOverlap(
#   cur_celltype_degs$gene,
#   unique(cur_links$Peak1_nearestGene),
#   genome.size=length(intersect(rownames(NucSeq), proj@peakSet$nearestGene))
# ))@pval
#
# update fisher df:
# diag_df <- data.frame(pval = diag_overlap_pval, celltype=cur_celltype, type='diagnosis')
# celltype_df <- data.frame(pval = celltype_overlap_pval, celltype=cur_celltype, type='celltype')
# fisher_df <- Reduce(rbind, list(fisher_df, diag_df, celltype_df))
# set up relevant lists:
pathway_set_list <- list(
'PFC' = as.character(unique(cur_celltype_pathways_pfc$pathway)),
'ETC' = as.character(cur_celltype_pathways_etx$pathway),
'SFG' = as.character(cur_celltype_pathways_sfg$pathway)
)
pathway_set_list[['mathys_pfc']]
venn_list <- list()
for(i in 1:length(pathway_set_list)){
cur_pathways <- pathway_set_list[[i]]
other_indices <- (i:length(pathway_set_list))[i:length(pathway_set_list) != i]
# number of pathways in cur set and not other sets:
venn_list[[names(pathway_set_list)[i]]] <- sum(!(cur_pathways %in% Reduce(union, pathway_set_list[other_indices])))
for(j in other_indices){
other_pathways <- pathway_set_list[[j]]
venn_list[[paste0(names(pathway_set_list)[i],'&',names(pathway_set_list)[j])]] <- length(intersect(cur_pathways, other_pathways))
}
}
# number of pathways in common between all sets:
venn_list[[paste0(names(pathway_set_list)[1], '&', names(pathway_set_list)[2], '&', names(pathway_set_list)[3])]] <- length(Reduce(intersect, pathway_set_list))
#
VennDiag <- euler(unlist(venn_list))
pdf(paste0('results/', '/venn_',cur_celltype,'.pdf'), width=6, height=6)
svg(paste0('results/', '/venn_',cur_celltype,'.svg'), width=6, height=6)
print(plot.venn(
VennDiag, quantities=TRUE, counts = TRUE, font=5, cex=1, alpha=0.8,
fill=rep(color_scheme_celltype[[cur_celltype]], 3)
))
dev.off()
}
}
# # add significance stars:
# fisher_df$significance <- stars.pval(fisher_df$pval)
#
# fisher_df$significance <- ifelse(
#   fisher_df$pval > 0.05, 'n.s.', ifelse(
#   fisher_df$pval >= 0.05, '*', ifelse(
#   fisher_df$pval >= 0.005, '**', '***'
# )))
library(VennDiagram)
library(gridExtra)
library(Seurat)
library(Signac)
library(tidyverse)
library(future.apply)
library(ggpubr)
library(reshape2)
library(tictoc)
library(patchwork)
library(ggridges)
library(RColorBrewer)
# knitr::opts_knit$set(root.dir = "/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
setwd("/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
# load all pathways
pathway_scores <- list()
studies <- c('mathys_pfc', 'leng_etc', 'leng_sfg')
tests <- c('early_vs_no', 'late_vs_early', 'ad_vs_no', 'late_vs_no')
for (study in studies) {
pathway_scores[[study]] <- list()
for (test in tests) {
pathway_scores[[study]][[test]] <- read.csv(sprintf('results/%s/%s_differentially_expressed_pathways.csv', test, study))
}
}
# create a list of unique cell types
celltypes <- unique(pathway_scores[['leng_etc']][['ad_vs_no']]$celltype)
setwd("/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
library(eulerr)
library(GeneOverlap)
fisher_df <- data.frame()
color_scheme_celltype <- list()
color_scheme_celltype[['Excitatory']] = 'aquamarine3'
color_scheme_celltype[['Inhibitory']] = 'darkolivegreen3'
color_scheme_celltype[['Astrocyte']] = 'brown3'
color_scheme_celltype[['Oligodendrocyte']] = 'darkorchid3'
color_scheme_celltype[['Microglia']] = 'deepskyblue3'
color_scheme_celltype[['OPC']] = 'deeppink3'
for(test_name in names(pathway_scores[['leng_etx']])){
for(cur_celltype in c('Astrocyte', 'Excitatory', 'Inhibitory', 'Microglia', 'Oligodendrocyte', 'OPC')){
# get diagnosis DEGs for this celltype:
# cur_degs <- celltype.diagnosis.markers %>% subset(cluster == 'AD' & celltype ==  cur_celltype & avg_logFC >= 0)
# get celltype degs for this celltype:
cur_celltype_pathways_pfc <- pathway_scores[['mathys_pfc']][[test_name]] %>% subset(celltype == cur_celltype)
cur_celltype_pathways_etx <- pathway_scores[['leng_etc']][[test_name]] %>% subset(celltype == cur_celltype)
cur_celltype_pathways_sfg <- pathway_scores[['leng_sfg']][[test_name]] %>% subset(celltype == cur_celltype)
# overlap between links and diagnosis degs
# diag_overlap_pval <- testGeneOverlap(newGeneOverlap(
#   unique(cur_celltype_pathways_pfc$pathway),
#   unique(cur_celltype_pathways_etx$pathway),
#   genome.size=length(intersect(rownames(NucSeq), proj@peakSet$nearestGene))
# ))@pval
# celltype_overlap_pval <- testGeneOverlap(newGeneOverlap(
#   cur_celltype_degs$gene,
#   unique(cur_links$Peak1_nearestGene),
#   genome.size=length(intersect(rownames(NucSeq), proj@peakSet$nearestGene))
# ))@pval
#
# update fisher df:
# diag_df <- data.frame(pval = diag_overlap_pval, celltype=cur_celltype, type='diagnosis')
# celltype_df <- data.frame(pval = celltype_overlap_pval, celltype=cur_celltype, type='celltype')
# fisher_df <- Reduce(rbind, list(fisher_df, diag_df, celltype_df))
# set up relevant lists:
pathway_set_list <- list(
'PFC' = as.character(unique(cur_celltype_pathways_pfc$pathway)),
'ETC' = as.character(cur_celltype_pathways_etx$pathway),
'SFG' = as.character(cur_celltype_pathways_sfg$pathway)
)
pathway_set_list[['mathys_pfc']]
venn_list <- list()
for(i in 1:length(pathway_set_list)){
cur_pathways <- pathway_set_list[[i]]
other_indices <- (i:length(pathway_set_list))[i:length(pathway_set_list) != i]
# number of pathways in cur set and not other sets:
venn_list[[names(pathway_set_list)[i]]] <- sum(!(cur_pathways %in% Reduce(union, pathway_set_list[other_indices])))
for(j in other_indices){
other_pathways <- pathway_set_list[[j]]
venn_list[[paste0(names(pathway_set_list)[i],'&',names(pathway_set_list)[j])]] <- length(intersect(cur_pathways, other_pathways))
}
}
# number of pathways in common between all sets:
venn_list[[paste0(names(pathway_set_list)[1], '&', names(pathway_set_list)[2], '&', names(pathway_set_list)[3])]] <- length(Reduce(intersect, pathway_set_list))
#
VennDiag <- euler(unlist(venn_list))
pdf(paste0('results/', '/venn_',cur_celltype,'.pdf'), width=6, height=6)
svg(paste0('results/', '/venn_',cur_celltype,'.svg'), width=6, height=6)
print(plot(
VennDiag, quantities=TRUE, counts = TRUE, font=5, cex=1, alpha=0.8,
fill=rep(color_scheme_celltype[[cur_celltype]], 3)
))
dev.off()
}
}
print(pathway_scores)
# # add significance stars:
# fisher_df$significance <- stars.pval(fisher_df$pval)
#
# fisher_df$significance <- ifelse(
#   fisher_df$pval > 0.05, 'n.s.', ifelse(
#   fisher_df$pval >= 0.05, '*', ifelse(
#   fisher_df$pval >= 0.005, '**', '***'
# )))
library(VennDiagram)
library(gridExtra)
library(Seurat)
library(Signac)
library(tidyverse)
library(future.apply)
library(ggpubr)
library(reshape2)
library(tictoc)
library(patchwork)
library(ggridges)
library(RColorBrewer)
knitr::opts_knit$set(root.dir = "/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
setwd("/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
# load all pathways
pathway_scores <- list()
studies <- c('mathys_pfc', 'leng_etc', 'leng_sfg')
tests <- c('early_vs_no', 'late_vs_early', 'ad_vs_no', 'late_vs_no')
for (study in studies) {
pathway_scores[[study]] <- list()
for (test in tests) {
pathway_scores[[study]][[test]] <- read.csv(sprintf('results/%s/%s_differentially_expressed_pathways.csv', test, study))
}
}
# create a list of unique cell types
celltypes <- unique(pathway_scores[['leng_etc']][['ad_vs_no']]$celltype)
setwd("/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
library(eulerr)
library(GeneOverlap)
fisher_df <- data.frame()
color_scheme_celltype <- list()
color_scheme_celltype[['Excitatory']] = 'aquamarine3'
color_scheme_celltype[['Inhibitory']] = 'darkolivegreen3'
color_scheme_celltype[['Astrocyte']] = 'brown3'
color_scheme_celltype[['Oligodendrocyte']] = 'darkorchid3'
color_scheme_celltype[['Microglia']] = 'deepskyblue3'
color_scheme_celltype[['OPC']] = 'deeppink3'
for(test_name in names(pathway_scores[['leng_etx']])){
for(cur_celltype in c('Astrocyte', 'Excitatory', 'Inhibitory', 'Microglia', 'Oligodendrocyte', 'OPC')){
# get diagnosis DEGs for this celltype:
# cur_degs <- celltype.diagnosis.markers %>% subset(cluster == 'AD' & celltype ==  cur_celltype & avg_logFC >= 0)
# get celltype degs for this celltype:
cur_celltype_pathways_pfc <- pathway_scores[['mathys_pfc']][[test_name]] %>% subset(celltype == cur_celltype)
cur_celltype_pathways_etx <- pathway_scores[['leng_etc']][[test_name]] %>% subset(celltype == cur_celltype)
cur_celltype_pathways_sfg <- pathway_scores[['leng_sfg']][[test_name]] %>% subset(celltype == cur_celltype)
# overlap between links and diagnosis degs
# diag_overlap_pval <- testGeneOverlap(newGeneOverlap(
#   unique(cur_celltype_pathways_pfc$pathway),
#   unique(cur_celltype_pathways_etx$pathway),
#   genome.size=length(intersect(rownames(NucSeq), proj@peakSet$nearestGene))
# ))@pval
# celltype_overlap_pval <- testGeneOverlap(newGeneOverlap(
#   cur_celltype_degs$gene,
#   unique(cur_links$Peak1_nearestGene),
#   genome.size=length(intersect(rownames(NucSeq), proj@peakSet$nearestGene))
# ))@pval
#
# update fisher df:
# diag_df <- data.frame(pval = diag_overlap_pval, celltype=cur_celltype, type='diagnosis')
# celltype_df <- data.frame(pval = celltype_overlap_pval, celltype=cur_celltype, type='celltype')
# fisher_df <- Reduce(rbind, list(fisher_df, diag_df, celltype_df))
# set up relevant lists:
pathway_set_list <- list(
'PFC' = as.character(unique(cur_celltype_pathways_pfc$pathway)),
'ETC' = as.character(cur_celltype_pathways_etx$pathway),
'SFG' = as.character(cur_celltype_pathways_sfg$pathway)
)
pathway_set_list[['mathys_pfc']]
venn_list <- list()
for(i in 1:length(pathway_set_list)){
cur_pathways <- pathway_set_list[[i]]
other_indices <- (i:length(pathway_set_list))[i:length(pathway_set_list) != i]
# number of pathways in cur set and not other sets:
venn_list[[names(pathway_set_list)[i]]] <- sum(!(cur_pathways %in% Reduce(union, pathway_set_list[other_indices])))
for(j in other_indices){
other_pathways <- pathway_set_list[[j]]
venn_list[[paste0(names(pathway_set_list)[i],'&',names(pathway_set_list)[j])]] <- length(intersect(cur_pathways, other_pathways))
}
}
# number of pathways in common between all sets:
venn_list[[paste0(names(pathway_set_list)[1], '&', names(pathway_set_list)[2], '&', names(pathway_set_list)[3])]] <- length(Reduce(intersect, pathway_set_list))
#
VennDiag <- euler(unlist(venn_list))
pdf(paste0('results/', test_name, '/venn_',cur_celltype,'.pdf'), width=6, height=6)
svg(paste0('results/', test_name, '/venn_',cur_celltype,'.svg'), width=6, height=6)
print(plot(
VennDiag, quantities=TRUE, counts = TRUE, font=5, cex=1, alpha=0.8,
fill=rep(color_scheme_celltype[[cur_celltype]], 3)
))
# dev.off()
}
}
# # add significance stars:
# fisher_df$significance <- stars.pval(fisher_df$pval)
#
# fisher_df$significance <- ifelse(
#   fisher_df$pval > 0.05, 'n.s.', ifelse(
#   fisher_df$pval >= 0.05, '*', ifelse(
#   fisher_df$pval >= 0.005, '**', '***'
# )))
library(VennDiagram)
library(gridExtra)
library(Seurat)
library(Signac)
library(tidyverse)
library(future.apply)
library(ggpubr)
library(reshape2)
library(tictoc)
library(patchwork)
library(ggridges)
library(RColorBrewer)
knitr::opts_knit$set(root.dir = "/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
setwd("/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
# load all pathways
pathway_scores <- list()
studies <- c('mathys_pfc', 'leng_etc', 'leng_sfg')
tests <- c('early_vs_no', 'late_vs_early', 'ad_vs_no', 'late_vs_no')
for (study in studies) {
pathway_scores[[study]] <- list()
for (test in tests) {
pathway_scores[[study]][[test]] <- read.csv(sprintf('results/%s/%s_differentially_expressed_pathways.csv', test, study))
}
}
# create a list of unique cell types
celltypes <- unique(pathway_scores[['leng_etc']][['ad_vs_no']]$celltype)
setwd("/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce")
library(eulerr)
library(GeneOverlap)
fisher_df <- data.frame()
color_scheme_celltype <- list()
color_scheme_celltype[['Excitatory']] = 'aquamarine3'
color_scheme_celltype[['Inhibitory']] = 'darkolivegreen3'
color_scheme_celltype[['Astrocyte']] = 'brown3'
color_scheme_celltype[['Oligodendrocyte']] = 'darkorchid3'
color_scheme_celltype[['Microglia']] = 'deepskyblue3'
color_scheme_celltype[['OPC']] = 'deeppink3'
for(test_name in names(pathway_scores[['leng_etx']])){
for(cur_celltype in c('Astrocyte', 'Excitatory', 'Inhibitory', 'Microglia', 'Oligodendrocyte', 'OPC')){
# get diagnosis DEGs for this celltype:
# cur_degs <- celltype.diagnosis.markers %>% subset(cluster == 'AD' & celltype ==  cur_celltype & avg_logFC >= 0)
# get celltype degs for this celltype:
cur_celltype_pathways_pfc <- pathway_scores[['mathys_pfc']][[test_name]] %>% subset(celltype == cur_celltype)
cur_celltype_pathways_etx <- pathway_scores[['leng_etc']][[test_name]] %>% subset(celltype == cur_celltype)
cur_celltype_pathways_sfg <- pathway_scores[['leng_sfg']][[test_name]] %>% subset(celltype == cur_celltype)
# overlap between links and diagnosis degs
# diag_overlap_pval <- testGeneOverlap(newGeneOverlap(
#   unique(cur_celltype_pathways_pfc$pathway),
#   unique(cur_celltype_pathways_etx$pathway),
#   genome.size=length(intersect(rownames(NucSeq), proj@peakSet$nearestGene))
# ))@pval
# celltype_overlap_pval <- testGeneOverlap(newGeneOverlap(
#   cur_celltype_degs$gene,
#   unique(cur_links$Peak1_nearestGene),
#   genome.size=length(intersect(rownames(NucSeq), proj@peakSet$nearestGene))
# ))@pval
#
# update fisher df:
# diag_df <- data.frame(pval = diag_overlap_pval, celltype=cur_celltype, type='diagnosis')
# celltype_df <- data.frame(pval = celltype_overlap_pval, celltype=cur_celltype, type='celltype')
# fisher_df <- Reduce(rbind, list(fisher_df, diag_df, celltype_df))
# set up relevant lists:
pathway_set_list <- list(
'PFC' = as.character(unique(cur_celltype_pathways_pfc$pathway)),
'ETC' = as.character(cur_celltype_pathways_etx$pathway),
'SFG' = as.character(cur_celltype_pathways_sfg$pathway)
)
pathway_set_list[['mathys_pfc']]
venn_list <- list()
for(i in 1:length(pathway_set_list)){
cur_pathways <- pathway_set_list[[i]]
other_indices <- (i:length(pathway_set_list))[i:length(pathway_set_list) != i]
# number of pathways in cur set and not other sets:
venn_list[[names(pathway_set_list)[i]]] <- sum(!(cur_pathways %in% Reduce(union, pathway_set_list[other_indices])))
for(j in other_indices){
other_pathways <- pathway_set_list[[j]]
venn_list[[paste0(names(pathway_set_list)[i],'&',names(pathway_set_list)[j])]] <- length(intersect(cur_pathways, other_pathways))
}
}
# number of pathways in common between all sets:
venn_list[[paste0(names(pathway_set_list)[1], '&', names(pathway_set_list)[2], '&', names(pathway_set_list)[3])]] <-            length(Reduce(intersect, pathway_set_list))
#
VennDiag <- euler(unlist(venn_list))
print(VennDiag)
pdf(paste0('results/', test_name, '/venn_',cur_celltype,'.pdf'), width=6, height=6)
svg(paste0('results/', test_name, '/venn_',cur_celltype,'.svg'), width=6, height=6)
print(plot(
VennDiag, quantities=TRUE, counts = TRUE, font=5, cex=1, alpha=0.8,
fill=rep(color_scheme_celltype[[cur_celltype]], 3)
))
# dev.off()
}
}
# # add significance stars:
# fisher_df$significance <- stars.pval(fisher_df$pval)
#
# fisher_df$significance <- ifelse(
#   fisher_df$pval > 0.05, 'n.s.', ifelse(
#   fisher_df$pval >= 0.05, '*', ifelse(
#   fisher_df$pval >= 0.005, '**', '***'
# )))
BiocManager::install('EnhancedVolcano')
install.packages('textshaping')
browseVignettes("EnhancedVolcano")
BiocManager::install("ComplexHeatmap")
install.packages("purrr")
install.packages("gplots")
install.packages("dendextend")
library(colorspace)
colormaps()
install.packages("colorspace")
install.packages("colorspace")
BiocManager::install("scran")
devtools::install_github("combiz/scFlow")
install.packages("reshape2")
install.packages("ComplexUpset")
install.packages("mltools")
BiocManager::install("scuttle")
if (!require("BiocManager")) install.packages("BiocManager")
if (!require("RcppParallel")) install.packages("RcppParallel")
if (!require("pacman")) install.packages("pacman")
if (!require("qs")) install.packages("qs")
if (!require("SingleCellExperiment"))
BiocManager::install("SingleCellExperiment")
if (!require("biomaRt")) BiocManager::install("biomaRt")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("cowplot")) install.packages("cowplot")
if (!require("viridis")) install.packages("viridis")
if (!require("ggrepel")) install.packages("ggrepel")
if (!require("Hmisc")) install.packages("Hmisc")
if (!require("edgeR")) BiocManager::install("edgeR")
if (!require("stats")) install.packages("stats")
if (!require("data.table")) install.packages("data.table")
if (!require("reshape2")) install.packages("reshape2")
if (!require("wesanderson")) install.packages("wesanderson")
if (!require("EnsDb.Hsapiens.v79")){
if (!require("RcppParallel")) install.packages("RcppParallel")
install.packages("RcppParallel")
install.packages("RcppParallel")
BiocManager::install("EnsDb.Hsapiens.v79")
install.packages("qs")
install.packages("qs")
BiocManager::install("biomaRt")
BiocManager::install("biomaRt")
install.packages("viridis")
install.packages("ggrepel")
install.packages("Hmisc")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("wesanderson")
BiocManager::install('edgeR')
BiocManager::install('edgeR', force=TRUE)
browseVignettes("MAST")
devtools::install_github("neurorestore/Libra")
library(Libra)
devtools::install_github("neurorestore/Libra")
BiocManager::install("DESeq2", version = "0.4.0")
BiocManager::install("edgeR", version = "3.28.1")
BiocManager::install("edgeR", version = "3.28")
BiocManager::install("DESeq2=0.4.0")
install.packages("forcats")
install.packages("tester")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("matrixStats")
install.packages("pbmcapply")
install.packages("lmerTest")
install.packages("lme4")
install.packages("glmmTMB")
install.packages("multcomp")
help(MAST::summary)
library(MAST)
help("summary")
?ZlmFit-clas
?ZlmFit-class
?ZlmFit
help("coef")
help("MAST::coef")
'??MAST::coef'
'??MAST::coef'
devtools::install_github("interactivereport/scRNAseq_DE")
install.packages("circlize")
ComplexHeatmap::Legend()?
help(ComplexHeatmap::Legend())
help(ComplexHeatmap::Legend
help(ComplexHeatmap::Legend)
ComplexHeatmap::Legend()
setwd("/Users/temitopeleke/Documents/Research Documents/Research codes/mathys_reproduce/scripts")
source("~/.active-rstudio-document", echo=TRUE)
ComplexHeatmap::Heatmap()?
help(ComplexHeatmap::Heatmap())
install.packages("readxl")
install.packages("knitr")
install.packages("kableExtra")
tinytex::install_tinytex()
